using Org.BouncyCastle.Asn1.Cmp;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;

namespace FitnessManager
{
    public partial class ChatBotForm : Form
    {
        // База знаний чат-бота
        private Dictionary<string, List<string>> knowledgeBase;

        public ChatBotForm()
        {
            InitializeComponent();
            InitializeKnowledgeBase();
        }

        private void ChatBotForm_Load(object sender, EventArgs e)
        {
            // Добавляем контекстное меню для быстрых вопросов
            ContextMenuStrip quickQuestions = new ContextMenuStrip();
            quickQuestions.Items.Add("Какие абонементы есть?").Click += (s, args) => {
                txtMessage.Text = "Какие абонементы предлагает клуб?";
            };
            quickQuestions.Items.Add("Расписание занятий").Click += (s, args) => {
                txtMessage.Text = "Где найти расписание занятий?";
            };
            quickQuestions.Items.Add("Как записаться на тренировку?").Click += (s, args) => {
                txtMessage.Text = "Как записаться на тренировку?";
            };
            quickQuestions.Items.Add("Контакты клуба").Click += (s, args) => {
                txtMessage.Text = "Контакты клуба";
            };

            txtMessage.ContextMenuStrip = quickQuestions;

            // Отображаем приветственное сообщение
            AddWelcomeMessage();
        }

        private void AddWelcomeMessage()
        {
            AddBotMessage("Здравствуйте! Я виртуальный помощник фитнес-клуба ActiveLife. Чем могу помочь вам сегодня?");
            AddBotMessage("Вы можете задать мне вопросы о наших услугах, абонементах, расписании занятий и многом другом.");
        }

        private void TxtMessage_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                e.SuppressKeyPress = true; // Предотвращаем звуковой сигнал
                BtnSend_Click(sender, e);
            }
        }

        private void BtnSend_Click(object sender, EventArgs e)
        {
            if (!string.IsNullOrWhiteSpace(txtMessage.Text))
            {
                AddUserMessage(txtMessage.Text);
                ProcessUserMessage(txtMessage.Text);
                txtMessage.Clear();
            }
        }

        private void BtnClear_Click(object sender, EventArgs e)
        {
            rtbChat.Clear();
            AddWelcomeMessage();
        }

        private void AddUserMessage(string message)
        {
            rtbChat.SelectionStart = rtbChat.TextLength;
            rtbChat.SelectionLength = 0;
            rtbChat.SelectionColor = Color.DarkBlue;
            rtbChat.SelectionFont = new Font(rtbChat.Font, FontStyle.Bold);
            rtbChat.AppendText("Вы: ");
            rtbChat.SelectionColor = Color.Blue;
            rtbChat.SelectionFont = new Font(rtbChat.Font, FontStyle.Regular);
            rtbChat.AppendText(message + Environment.NewLine);
            rtbChat.ScrollToCaret();
        }

        private void AddBotMessage(string message)
        {
            // Эффект "печатания"
            lblStatus.Text = "Печатает...";
            lblStatus.ForeColor = Color.Orange;
            Refresh();

            // Небольшая задержка для реалистичности
            System.Threading.Thread.Sleep(new Random().Next(300, 800));

            rtbChat.SelectionStart = rtbChat.TextLength;
            rtbChat.SelectionLength = 0;
            rtbChat.SelectionColor = Color.DarkGreen;
            rtbChat.SelectionFont = new Font(rtbChat.Font, FontStyle.Bold);
            rtbChat.AppendText("Бот: ");
            rtbChat.SelectionColor = Color.Black;
            rtbChat.SelectionFont = new Font(rtbChat.Font, FontStyle.Regular);
            rtbChat.AppendText(message + Environment.NewLine + Environment.NewLine);
            rtbChat.ScrollToCaret();

            // Возвращаем статус "онлайн"
            lblStatus.Text = "Онлайн";
            lblStatus.ForeColor = Color.FromArgb(0, 200, 0);
        }

        private void InitializeKnowledgeBase()
        {
            knowledgeBase = new Dictionary<string, List<string>>(StringComparer.OrdinalIgnoreCase)
            {
                { "приветствие", new List<string>
                    {
                        "Здравствуйте! Чем я могу вам помочь?",
                        "Привет! Я рад вас видеть. Чем могу быть полезен?",
                        "Добрый день! Готов ответить на ваши вопросы о фитнес-клубе ActiveLife."
                    }
                },
                { "расписание", new List<string>
                    {
                        "Расписание занятий доступно в разделе \"Расписание\" на главной странице приложения. Также вы можете уточнить его у администратора.",
                        "Актуальное расписание всегда доступно в приложении и на нашем сайте. Также вы можете позвонить по телефону +7 (XXX) XXX-XX-XX для уточнения информации."
                    }
                },
                { "абонементы", new List<string>
                    {
                        "В нашем клубе доступны следующие типы абонементов:\n1. Базовый (от 2000₽) - тренажерный зал\n2. Стандарт (от 3500₽) - тренажерный зал + групповые занятия\n3. Премиум (от 5000₽) - полный доступ ко всем услугам\nПодробности у администратора.",
                        "Мы предлагаем несколько видов абонементов с разным набором услуг. Базовый (тренажерный зал) от 2000₽, Стандарт (+ групповые занятия) от 3500₽, Премиум (полный доступ) от 5000₽. Точные цены зависят от длительности абонемента."
                    }
                },
                { "тренер", new List<string>
                    {
                        "Персональные тренировки можно заказать у любого из наших тренеров. Стоимость от 1000₽ за тренировку. Мы подберем тренера под ваши индивидуальные цели.",
                        "В нашем клубе работают сертифицированные тренеры с большим опытом. Персональная тренировка стоит от 1000₽. Для подбора тренера обратитесь к администратору."
                    }
                },
                { "часы_работы", new List<string>
                    {
                        "Наш фитнес-клуб работает с 07:00 до 23:00 в будние дни, с 09:00 до 22:00 в выходные и праздничные дни.",
                        "Режим работы клуба ActiveLife: Пн-Пт с 07:00 до 23:00, Сб-Вс с 09:00 до 22:00."
                    }
                },
                { "контакты", new List<string>
                    {
                        "Контактные данные фитнес-клуба ActiveLife:\nТелефон: +7 (XXX) XXX-XX-XX\nEmail: info@activelife.com\nАдрес: г. Москва, ул. Спортивная, д. 10",
                        "Вы можете связаться с нами по телефону +7 (XXX) XXX-XX-XX или по email: info@activelife.com. Наш адрес: г. Москва, ул. Спортивная, д. 10."
                    }
                },
                { "заморозка", new List<string>
                    {
                        "Заморозка абонемента доступна для абонементов типа Стандарт и Премиум. Для этого обратитесь к администратору клуба лично или по телефону.",
                        "Вы можете заморозить абонемент Стандарт на срок до 14 дней, Премиум - до 30 дней. Заявку на заморозку можно оставить у администратора."
                    }
                },
                { "запись", new List<string>
                    {
                        "Записаться на групповые занятия можно через приложение ActiveLife, на сайте или у администратора клуба. Предварительная запись открывается за 7 дней.",
                        "Для записи на групповые тренировки используйте приложение (в разделе \"Расписание\") или позвоните администратору по телефону +7 (XXX) XXX-XX-XX."
                    }
                },
                { "пробное", new List<string>
                    {
                        "Да, у нас есть пробное занятие! Вы можете посетить наш клуб и опробовать любую групповую тренировку или тренажерный зал. Стоимость - 500₽. Эта сумма будет учтена при покупке абонемента.",
                        "Мы предлагаем пробное посещение клуба за 500₽. При покупке абонемента в тот же день, эта сумма будет вычтена из стоимости абонемента."
                    }
                },
                { "помощь", new List<string>
                    {
                        "Я могу рассказать вам о расписании занятий, стоимости абонементов, персональных тренировках, часах работы клуба и многом другом. Просто задайте вопрос!",
                        "Чем я могу помочь? Я могу ответить на вопросы об абонементах, расписании, тренерах, контактах и других услугах клуба."
                    }
                },
                { "оборудование", new List<string>
                    {
                        "Наш клуб оснащен современным оборудованием от ведущих производителей: кардиозона (беговые дорожки, эллипсоиды, велотренажеры), силовые тренажеры, зона свободных весов, функциональная зона.",
                        "В ActiveLife представлено профессиональное оборудование для кардио- и силовых тренировок, а также для функционального тренинга. Все тренажеры регулярно обслуживаются."
                    }
                },
                { "групповые_занятия", new List<string>
                    {
                        "В клубе проводится более 40 видов групповых занятий: йога, пилатес, зумба, степ-аэробика, силовые тренировки, танцевальные направления и многое другое. Полное расписание доступно в приложении.",
                        "Мы предлагаем широкий выбор групповых программ для любого уровня подготовки. Йога, пилатес, силовые и танцевальные направления и многое другое. Расписание регулярно обновляется."
                    }
                },
                { "дети", new List<string>
                    {
                        "Да, в нашем клубе есть детские программы для разных возрастов: танцы (от 4 лет), гимнастика (от 3 лет), боевые искусства (от 6 лет). Также доступна детская комната для детей от 3 до 8 лет.",
                        "Мы предлагаем специальные занятия для детей разных возрастов. Также есть детская игровая комната с профессиональным присмотром, пока родители тренируются."
                    }
                },
                { "полотенца", new List<string>
                    {
                        "Полотенца предоставляются бесплатно для владельцев Премиум-абонементов. Для других типов абонементов услуга платная - 50₽ за полотенце.",
                        "Вы можете взять полотенце на стойке администратора. Для Премиум-клиентов - бесплатно, для остальных - 50₽ за полотенце."
                    }
                },
                { "вода", new List<string>
                    {
                        "Питьевая вода доступна бесплатно во всех зонах клуба. Спортивные напитки и протеиновые коктейли можно приобрести в фитнес-баре.",
                        "В клубе установлены кулеры с питьевой водой. Они находятся в основных тренировочных зонах. Пользоваться ими можно бесплатно."
                    }
                },
                { "душ", new List<string>
                    {
                        "В раздевалках нашего клуба есть душевые кабины и фены. Шампунь и гель для душа предоставляются бесплатно.",
                        "Душевые кабины расположены в мужской и женской раздевалках. Все необходимые принадлежности предоставляются."
                    }
                },
                { "парковка", new List<string>
                    {
                        "Для клиентов доступна бесплатная парковка на территории клуба. Для владельцев Премиум-абонементов есть выделенные места.",
                        "У нас есть бесплатная парковка на 50 машиномест. Вход на парковку с улицы Спортивной."
                    }
                },
                { "неизвестно", new List<string>
                    {
                        "Извините, я не совсем понял ваш вопрос. Попробуйте переформулировать или задать другой вопрос.",
                        "Прошу прощения, но я не могу ответить на этот вопрос. Пожалуйста, уточните запрос или обратитесь к администратору клуба для получения более подробной информации.",
                        "Мне не хватает информации, чтобы ответить на этот вопрос. Попробуйте спросить о наших абонементах, расписании или услугах."
                    }
                }
            };
        }

        // Определение темы сообщения пользователя
        private string DetermineMessageTopic(string message)
        {
            message = message.ToLower();

            Dictionary<string, List<string>> patterns = new Dictionary<string, List<string>>
            {
                { "приветствие", new List<string> { "привет", "здравствуй", "добрый день", "добрый вечер", "доброе утро", "здравствуйте", "приветствую" } },
                { "расписание", new List<string> { "расписание", "график", "когда занятия", "время занятий", "какие занятия" } },
                { "абонементы", new List<string> { "абонемент", "карта", "клубная карта", "стоимость", "цена", "тариф", "сколько стоит" } },
                { "тренер", new List<string> { "тренер", "персонал", "инструктор", "персональная тренировка", "индивидуально" } },
                { "часы_работы", new List<string> { "часы работы", "режим работы", "когда открыт", "до скольки", "время работы", "когда закрывается", "когда открывается" } },
                { "контакты", new List<string> { "контакт", "телефон", "адрес", "почта", "email", "связаться", "где находится" } },
                { "заморозка", new List<string> { "заморозка", "заморозить", "приостановить", "остановить" } },
                { "запись", new List<string> { "запись", "записаться", "зарегистрироваться", "бронирование", "забронировать", "как попасть" } },
                { "пробное", new List<string> { "пробное", "тестовое", "пробник", "бесплатное", "попробовать", "первый раз" } },
                { "помощь", new List<string> { "помощь", "помоги", "подскажи", "не знаю", "что делать", "что ты умеешь", "что можешь", "помочь" } },
                { "оборудование", new List<string> { "оборудование", "тренажер", "снаряды", "инвентарь", "техника", "какие тренажеры" } },
                { "групповые_занятия", new List<string> { "групповые", "группов", "аэробика", "йога", "пилатес", "зумба", "силов", "танц", "программы" } },
                { "дети", new List<string> { "дети", "ребенок", "детский", "для детей", "ребенка", "малыш" } },
                { "полотенца", new List<string> { "полотенце", "полотенца", "салфетки" } },
                { "вода", new List<string> { "вода", "пить", "питьевая", "напитки", "пить" } },
                { "душ", new List<string> { "душ", "помыться", "раздевалка", "кабинка", "умыться", "помыть" } },
                { "парковка", new List<string> { "парковка", "парковочное", "машина", "автомобиль", "стоянка", "припарковать" } }
            };

            foreach (var pattern in patterns)
            {
                foreach (var keyword in pattern.Value)
                {
                    if (message.Contains(keyword))
                    {
                        return pattern.Key;
                    }
                }
            }

            return "неизвестно";
        }

        private void ProcessUserMessage(string message)
        {
            // Определяем тему сообщения
            string topic = DetermineMessageTopic(message);

            // Находим подходящий ответ
            if (knowledgeBase.TryGetValue(topic, out List<string> responses))
            {
                // Выбираем случайный ответ из доступных для данной темы
                string response = responses[new Random().Next(responses.Count)];
                AddBotMessage(response);
            }
            else
            {
                // Если тема не найдена, используем ответ "неизвестно"
                string defaultResponse = knowledgeBase["неизвестно"][new Random().Next(knowledgeBase["неизвестно"].Count)];
                AddBotMessage(defaultResponse);
            }
        }
    }
}